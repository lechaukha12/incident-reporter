# Hệ thống Tuning OPS

Một ứng dụng web nội bộ giúp ghi nhận, theo dõi và quản lý các sự cố kỹ thuật (incidents) một cách tập trung, có hệ thống và tự động hóa, được xây dựng trên nền tảng Java Spring Boot và HTML/JS với Nginx hoặc Angular.

## 🎯 Vấn đề & Mục tiêu

### Vấn đề

Tại môi trường microservices phức tạp của ứng dụng mobile banking, việc xử lý sự cố đang gặp các thách thức:

- **Phản ứng chậm**: Sự cố chỉ được phát hiện khi có người dùng phàn nàn hoặc DevOps phải truy vấn log/trace thủ công.

- **Quy trình rời rạc**: Thông tin về sự cố bị phân tán qua nhiều kênh chat, không có một nơi ghi nhận tập trung.

- **Mất thời gian**: Đội ngũ tốn nhiều thời gian để tìm hiểu "chuyện gì đã xảy ra" thay vì tập trung vào việc khắc phục.

- **Khó rút kinh nghiệm**: Không có dữ liệu lịch sử để phân tích, tìm ra nguyên nhân gốc rễ và ngăn ngừa các sự cố tương tự trong tương lai.

### Mục tiêu

Dự án Hệ thống Tuning OPS được xây dựng để giải quyết các vấn đề trên, với mục tiêu:

- Tập trung hóa toàn bộ thông tin về sự cố vào một nơi duy nhất.

- Tự động hóa việc tạo sự cố ngay khi hệ thống giám sát phát hiện dấu hiệu bất thường.

- Chuẩn hóa quy trình xử lý sự cố từ lúc phát hiện đến khi giải quyết xong.

- Cung cấp dữ liệu để phân tích và cải tiến, giảm thiểu thời gian khắc phục (MTTR) và tăng độ ổn định cho hệ thống.

## ✨ Các tính năng cốt lõi

- **Quản lý Incident Toàn diện**: Tạo, cập nhật, phân công và theo dõi incident theo vòng đời (Investigating -> Identified -> Monitoring -> Resolved).

- **Phân loại theo Mức độ**: Gán mức độ nghiêm trọng (Severity Level SEV1 -> SEV4) để ưu tiên xử lý.

- **Nhật ký hành động (Timeline)**: Ghi lại toàn bộ diễn biến, quyết định và hành động xử lý theo thời gian thực.

- **Tự động tạo Incident**: Tích hợp với hệ thống cảnh báo (Grafana, Prometheus) qua Webhook để tự động tạo incident.

- **Thông báo tức thì**: Tích hợp với Slack/Teams để gửi thông báo về các cập nhật quan trọng của incident đến kênh chat tương ứng.

- **Giao diện trực quan**: Dashboard hiển thị danh sách incident, cho phép lọc và tìm kiếm dễ dàng.

## 🛠️ Ngăn xếp Công nghệ (Tech Stack)

| Phần | Công nghệ | Lý do lựa chọn |
|------|-----------|----------------|
| Frontend | HTML/JS + Nginx hoặc Angular | Cung cấp cả phiên bản đơn giản (HTML/JS) và phiên bản đầy đủ (Angular) tùy theo nhu cầu triển khai |
| Backend | Java + Spring Boot | Hệ sinh thái vững chắc, hiệu năng cao, bảo mật tốt, được tin dùng trong ngành tài chính |
| Database | PostgreSQL | Hệ CSDL quan hệ mạnh mẽ, ổn định, hỗ trợ tốt các kiểu dữ liệu phức tạp |
| Triển khai | Docker & Docker Compose | Đóng gói toàn bộ ứng dụng, dễ dàng thiết lập môi trường và triển khai nhất quán |

## 🏗️ Cấu trúc Thư mục

```
incident-reporter/
├── .gitignore
├── docker-compose.yml
├── README.md
├── start.sh
├── api-test.html
├── backend/
│   ├── Dockerfile
│   ├── src/main/java/com/nganhang/sentinel/
│   │   ├── config/
│   │   ├── controller/
│   │   ├── dto/
│   │   ├── model/ 
│   │   ├── repository/
│   │   ├── service/
│   │   └── SentinelApplication.java
│   ├── src/main/resources/
│   │   ├── application.properties
│   │   └── db/migration/
│   │       └── V1__create_incidents_table.sql
│   └── pom.xml
└── frontend/
    ├── src/
    │   ├── app/
    │   ├── assets/
    │   ├── environments/
    │   ├── fallback-index.html
    │   ├── api-test-standalone.html
    │   └── connection-test.html
    ├── angular.json
    ├── nginx.conf
    ├── Dockerfile
    ├── Dockerfile.nginx
    └── package.json
```

## 🔌 API Endpoints

- **POST /api/incidents**: Tạo một incident mới (có thể được gọi từ webhook).
- **GET /api/incidents**: Lấy danh sách incidents (hỗ trợ filter, sort, phân trang).
- **GET /api/incidents/{id}**: Lấy chi tiết một incident và timeline của nó.
- **PUT /api/incidents/{id}**: Cập nhật trạng thái, mức độ nghiêm trọng, người phụ trách.
- **POST /api/incidents/{id}/updates**: Thêm một ghi nhận mới vào timeline của incident.
- **GET /api/incidents/stats**: Lấy thống kê tổng quan về các sự cố.

## 🚀 Bắt đầu Nhanh (Getting Started)

### Yêu cầu:

- Docker & Docker Compose
- Git (tùy chọn)

### Các bước cài đặt:

1. **Clone repository:**
   ```bash
   git clone <your-repository-url>
   cd incident-reporter
   ```

2. **Chạy ứng dụng với Docker Compose:**
   ```bash
   docker-compose up -d
   ```
   
   Lệnh này sẽ build các images và khởi chạy tất cả các services (frontend, backend, db).

3. **Truy cập ứng dụng:**
   - Frontend: http://localhost:4200
   - Backend API: http://localhost:8080
   - API Test: http://localhost:4200/api-test.html

## 🔧 Cấu hình và Triển khai

### Cấu hình Frontend:

Frontend có hai phiên bản triển khai:

1. **Phiên bản HTML/JS với Nginx (mặc định):**
   - Sử dụng `Dockerfile.nginx` để build
   - Phục vụ trên port 4200
   - Đơn giản, nhẹ nhàng và dễ triển khai

2. **Phiên bản Angular (tùy chọn):**
   - Sử dụng `Dockerfile` để build
   - Yêu cầu Node.js để phát triển
   - Cung cấp trải nghiệm người dùng phong phú hơn

### Cấu hình Backend:

- Cấu hình được đặt trong `backend/src/main/resources/application.properties`
- Spring Boot REST API chạy trên port 8080
- Sử dụng Flyway để quản lý database migrations

### Kết nối API:

API URL được tự động cấu hình dựa trên môi trường:
- Môi trường phát triển (localhost): `http://localhost:8080/api`
- Môi trường Docker: `http://backend:8080/api`

## 🧪 Kiểm thử

Dự án bao gồm các công cụ kiểm thử:

- **api-test.html**: Trang kiểm tra kết nối API đơn giản
- **api-test-standalone.html**: Công cụ kiểm tra API độc lập
- **connection-test.html**: Kiểm tra kết nối giữa frontend và backend

Trong thư mục `backend/src/test` có các bài kiểm thử tự động cho backend:
- Unit tests cho Service layer
- Integration tests cho Controller layer

## 📝 Phát triển

### Thêm tính năng mới:

1. **Backend**: 
   - Thêm model/entity trong `backend/src/main/java/com/nganhang/sentinel/model`
   - Tạo repository trong `backend/src/main/java/com/nganhang/sentinel/repository`
   - Triển khai logic nghiệp vụ trong `backend/src/main/java/com/nganhang/sentinel/service`
   - Cung cấp RESTful API trong `backend/src/main/java/com/nganhang/sentinel/controller`

2. **Frontend**:
   - Với phiên bản HTML/JS: Chỉnh sửa `frontend/src/fallback-index.html`
   - Với phiên bản Angular: Phát triển trong `frontend/src/app`

### Quản lý Database:

Sử dụng Flyway migration để quản lý schema. Thêm file migration mới trong `backend/src/main/resources/db/migration` với quy ước đặt tên `V{n}__description.sql`.

## 🤝 Đóng góp

Nếu bạn muốn đóng góp cho dự án, vui lòng:
1. Fork repository
2. Tạo branch mới (`git checkout -b feature/amazing-feature`)
3. Commit thay đổi của bạn (`git commit -m 'Add some amazing feature'`)
4. Push lên branch (`git push origin feature/amazing-feature`)
5. Mở Pull Request
